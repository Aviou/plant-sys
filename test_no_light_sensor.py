#!/usr/bin/env python3
"""Test der vereinfachten WLAN-Lichtsteuerung ohne Lichtsensor."""

import sys
import os
from datetime import datetime, time

# Add the custom component path
sys.path.append('/home/avi23/Projekte/plant-sys/custom_components/athena_plant_monitor')

def test_no_light_sensor():
    """Testet die Lichtsteuerung ohne Lichtsensor."""
    print("=== Athena Plant Monitor - OHNE Lichtsensor Test ===\n")
    
    try:
        from const import (
            ESPHOME_ENTITIES, DAY_NIGHT_CONFIG,
            CONF_EXTERNAL_LIGHT_ENTITY, CONF_LIGHT_SCHEDULE_START, 
            CONF_LIGHT_SCHEDULE_END, DEFAULT_LIGHT_SCHEDULE_START,
            DEFAULT_LIGHT_SCHEDULE_END
        )
        
        print("‚úÖ Konstanten erfolgreich importiert")
        
        # √úberpr√ºfe, dass keine Lichtsensor-Entit√§ten vorhanden sind
        light_sensor_entities = [key for key in ESPHOME_ENTITIES.keys() if 'light' in key and 'sensor' in ESPHOME_ENTITIES[key]]
        
        if light_sensor_entities:
            print(f"‚ùå Noch Lichtsensor-Entit√§ten gefunden: {light_sensor_entities}")
            return False
        else:
            print("‚úÖ Keine Lichtsensor-Entit√§ten gefunden - korrekt entfernt")
        
        # √úberpr√ºfe DAY_NIGHT_CONFIG
        if "light_threshold" in DAY_NIGHT_CONFIG:
            print(f"‚ùå Lichtsensor-Schwellenwert noch in DAY_NIGHT_CONFIG")
            return False
        else:
            print("‚úÖ Lichtsensor-Schwellenwert aus DAY_NIGHT_CONFIG entfernt")
        
        print(f"\nüìã Verf√ºgbare Tag/Nacht-Erkennungsmethoden:")
        print(f"  1. üîå Externe Lichtentit√§t (WLAN-Steckdose)")
        print(f"     ‚îî‚îÄ Konfiguration: {CONF_EXTERNAL_LIGHT_ENTITY}")
        print(f"  2. üí° ESPHome LED Panel")
        print(f"     ‚îî‚îÄ Entit√§t: {ESPHOME_ENTITIES.get('led_panel', 'Nicht konfiguriert')}")
        print(f"  3. üîÄ ESPHome Growlight Switch")
        print(f"     ‚îî‚îÄ Entit√§t: {ESPHOME_ENTITIES.get('grow_light_switch', 'Nicht konfiguriert')}")
        print(f"  4. ‚è∞ Zeitbasierte Erkennung (Fallback)")
        print(f"     ‚îî‚îÄ Standard: {DEFAULT_LIGHT_SCHEDULE_START} - {DEFAULT_LIGHT_SCHEDULE_END}")
        
        # Test der Konfigurationsparameter
        print(f"\nüõ†Ô∏è Konfigurationsparameter:")
        print(f"  ‚Ä¢ Temperatur-Unterschied: {DAY_NIGHT_CONFIG.get('temp_difference', 'N/A')}¬∞C")
        print(f"  ‚Ä¢ VPD-Unterschied: {DAY_NIGHT_CONFIG.get('vpd_difference', 'N/A')} kPa")
        print(f"  ‚Ä¢ Luftfeuchtigkeit-Erh√∂hung: {DAY_NIGHT_CONFIG.get('humidity_increase', 'N/A')}%")
        print(f"  ‚Ä¢ CO‚ÇÇ-Reduktion: {DAY_NIGHT_CONFIG.get('co2_reduction', 'N/A')} ppm")
        
        # Simuliere Zeitbasierte Erkennung
        current_time = datetime.now().time()
        start_time = time.fromisoformat(DEFAULT_LIGHT_SCHEDULE_START)
        end_time = time.fromisoformat(DEFAULT_LIGHT_SCHEDULE_END)
        
        if start_time <= end_time:
            is_day_time = start_time <= current_time <= end_time
        else:
            is_day_time = current_time >= start_time or current_time <= end_time
        
        print(f"\n‚è∞ Zeitbasierte Erkennung (Fallback-Test):")
        print(f"  Aktuelle Zeit: {current_time}")
        print(f"  Licht-Zeitplan: {start_time} - {end_time}")
        print(f"  Status: {'üåû Tag' if is_day_time else 'üåô Nacht'}")
        
        # Test der automatischen Switch-Erkennung
        print(f"\nüîç Automatische Licht-Switch-Erkennung:")
        test_entities = [
            "switch.growlight_steckdose",
            "switch.shelly_growroom", 
            "switch.led_panel_power",
            "switch.wachstumslicht",
            "light.philips_hue_growlight",
            "switch.some_random_device"  # Sollte nicht erkannt werden
        ]
        
        light_keywords = ["light", "lamp", "led", "grow", "steckdose", "socket"]
        
        for entity in test_entities:
            is_light = (entity.startswith("switch.") and 
                       any(keyword in entity.lower() for keyword in light_keywords)) or entity.startswith("light.")
            print(f"  {'‚úÖ' if is_light else '‚ùå'} {entity}")
        
        # Test der vereinfachten ESPHome Entit√§ten
        print(f"\nüìä ESPHome-Entit√§ten (ohne Lichtsensoren):")
        sensor_entities = [key for key in ESPHOME_ENTITIES.keys() if key in [
            "temperature", "humidity", "pressure", "vwc", "ec_substrate", 
            "ph_substrate", "temp_substrate", "co2", "water_level"
        ]]
        
        for entity in sensor_entities:
            print(f"  ‚úÖ {entity}: {ESPHOME_ENTITIES[entity]}")
        
        # Lichtsteuerungs-Entit√§ten
        light_control_entities = [key for key in ESPHOME_ENTITIES.keys() if 'led' in key or 'light' in key]
        if light_control_entities:
            print(f"\nüí° Lichtsteuerungs-Entit√§ten:")
            for entity in light_control_entities:
                print(f"  üí° {entity}: {ESPHOME_ENTITIES[entity]}")
        
        print(f"\n‚úÖ VEREINFACHTE LICHTSTEUERUNG ERFOLGREICH!")
        print(f"")
        print(f"üéØ Optimierungen:")
        print(f"   ‚Ä¢ Keine Lichtsensor-Abh√§ngigkeit")
        print(f"   ‚Ä¢ Direkte WLAN-Steckdosen-Steuerung")
        print(f"   ‚Ä¢ Zeitbasierte Fallback-Erkennung")
        print(f"   ‚Ä¢ Vereinfachte ESPHome-Integration")
        print(f"   ‚Ä¢ Weniger Sensoranforderungen")
        print(f"")
        print(f"üîß Vorteile:")
        print(f"   ‚Ä¢ Einfachere Hardware-Anforderungen")
        print(f"   ‚Ä¢ Zuverl√§ssige zeitbasierte Steuerung")
        print(f"   ‚Ä¢ Fokus auf WLAN-Steckdosen (sehr verbreitet)")
        print(f"   ‚Ä¢ Weniger Ausfallquellen")
        print(f"   ‚Ä¢ Kosteng√ºnstiger")
        print(f"")
        print(f"üì± Setup-Schritte:")
        print(f"   1. WLAN-Steckdose in Home Assistant einrichten")
        print(f"   2. Athena Integration installieren")
        print(f"   3. Externe Lichtentit√§t in UI w√§hlen")
        print(f"   4. Licht-Zeitplan konfigurieren")
        print(f"   5. Tag/Nacht-Automatisierung testen")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import-Fehler: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Fehler: {e}")
        return False

if __name__ == "__main__":
    success = test_no_light_sensor()
    if success:
        print(f"\nüöÄ BEREIT F√úR PRODUKTIVEINSATZ!")
        print(f"   Keine zus√§tzlichen Lichtsensoren erforderlich.")
        print(f"   Perfekt f√ºr Standard-WLAN-Steckdosen-Setups.")
    
    sys.exit(0 if success else 1)
